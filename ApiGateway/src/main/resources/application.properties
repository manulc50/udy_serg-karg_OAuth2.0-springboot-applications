server.port: 8082
# Importante para el registro de este microservicio en el servidor Eureka como cliente. Se usará este nombre para el registro
spring.application.name=api-gateway

# Propiedad para indicar donde se encuentra el servidor de descubrimiento Eureka para que este microservicio se registre como cliente
# Si se omite, por defecto se intenta localizar al servidor en la url "http://localhost:8761/eureka", es decir, el puerto 8761 es el puerto por defecto del servidor Eureka si no se establece otro puerto
# En nuestro caso en concreto, se ha establecido el puerto 8010 para el servidor Eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka

spring.cloud.gateway.routes[0].id: users-status-check
spring.cloud.gateway.routes[0].uri: lb://demo-resource-server
spring.cloud.gateway.routes[0].predicates[0]: Path=/users/status/check
spring.cloud.gateway.routes[0].predicates[1]: Method=GET
spring.cloud.gateway.routes[0].filters[0]: RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[1].id: photos
spring.cloud.gateway.routes[1].uri: lb://photos-resource-server
spring.cloud.gateway.routes[1].predicates[0]: Path=/photos
spring.cloud.gateway.routes[1].predicates[1]: Method=GET
spring.cloud.gateway.routes[1].filters[0]: RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[2].id: albums
spring.cloud.gateway.routes[2].uri: lb://albums-resource-server
spring.cloud.gateway.routes[2].predicates[0]: Path=/albums
spring.cloud.gateway.routes[2].predicates[1]: Method=GET
spring.cloud.gateway.routes[2].filters[0]: RemoveRequestHeader=Cookie

# Propiedades con la configuración del CORS
# "/**" indica para cualquier ruta del origen http://localhost:8181
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins[0]: http://localhost:8181
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowedMethods: *
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers[0]: Authorization
spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping: true