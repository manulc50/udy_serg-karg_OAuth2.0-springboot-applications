server.port: 8087

# Configuración del cliente OAuth2
# Estas propiedades son para indicar el cliente OAuth2, registrado previamente en nuestro servidor de autorización Keycloak, que se corresponde con esta aplicación web(cliente web)
# El texto "mywebclient" que hay a continuación del prefijo "spring.security.oauth2.client.registration" se corresponde con un identificador de registro y debe ser único para cada cliente OAuth2
spring.security.oauth2.client.registration.mywebclient.client-id: photo-app-webclient
spring.security.oauth2.client.registration.mywebclient.client-secret: 7cc42548-6cb0-4c0d-adb2-4b850431c6c6
spring.security.oauth2.client.registration.mywebclient.scope: openid, profile, roles
spring.security.oauth2.client.registration.mywebclient.authorization-grant-type: authorization_code
# La uri de redirección está formada por 3 partes; "http://localhost:8087"(host y puerto donde se ejecuta este cliente OAuth2), "/login/oauth2/code"(esta parte es común a la mayoria de servidores de autorización, como Keycloak, Facebook o Google, y no se debe modificar) y "/mywebclient"(se corresponde con el identificador de registro usado)
spring.security.oauth2.client.registration.mywebclient.redirect-uri: http://localhost:8087/login/oauth2/code/mywebclient

# Configuración del proveedor OAuth2(nuestro servidor de autorización Keycloak)
# Estas propiedades son necesarias para que esta aplicación web(cliente web) pueda comunicarse con nuestro servidor de autorización Keycloak
# Cada servidor de autorización(Keycloak, Facebook, Google, Okta, etc...) tiene sus propios valores para estas propiedades. Estos valores son sólo válidos para el servidor de autorización Keycloak, que es el que estamos usando 
# "appsdeveloperblog" es el nombre de un Realm, que hemos creado previamente en nuestro servidor de autorización Keycloak, donde está registrado el cliente OAuth2 correspondiente a esta aplicación web(cliente web)
# Uri para autenticarse con el servidor de autorización
spring.security.oauth2.client.provider.mywebclient.authorization-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/auth
# Uri para adquirir tokens JWT
spring.security.oauth2.client.provider.mywebclient.token-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/token
# Uri para validar los tokens JWT
spring.security.oauth2.client.provider.mywebclient.jwk-set-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/certs
# Uri que proporciona datos del usuario autenticado(openId)
spring.security.oauth2.client.provider.mywebclient.user-info-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/userinfo
# Mapea el dato "preferred_username" de los claims(derechos) de los tokens JWT con el atributo "user-name"
spring.security.oauth2.client.provider.mywebclient.user-name-attribute=preferred_username